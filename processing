import processing.video.*;
import processing.sound.*;

import processing.serial.*;

Serial serial;
String inString;
int f = 20;
String distanceStr;
float distance;
int mWidth = 600;
int mHeight = 480;
int mWidthHalf = mWidth / 2;
int mHeightHalf = mHeight / 2;

float mMaxDistance = mWidth / 6.0f;

SoundFile sample;
Amplitude rms;
float smoothingFactor = 0.01;
float sum;


int cellSize = 10;

int cols, rows;

Capture video;



int cubeSize = 800;
int blockSize = 10;


void setup() {
	size(1280,840, P3D);
 sample = new SoundFile(this, "moon.aiff");
  sample.loop();
   rms = new Amplitude(this);
  rms.input(sample);
  printArray(Serial.list());
 
  String portName = Serial.list()[1];
  
  serial = new Serial(this, portName, 9600);
  serial.bufferUntil('\n');
  
  
  cols = width / cellSize;
  rows = height / cellSize;
  colorMode(RGB, 255, 255, 255, 100);
  rectMode(CENTER);

 
  video = new Capture(this, width, height);
  
  // Start capturing the images from the camera
  video.start();  
	
  background(#FF0000);
}


void draw() {
  
   if (video.available()) {
    video.read();
    video.loadPixels();
    sum += (rms.analyze() - sum) * smoothingFactor;
  println(sum);
	//background(#FF0000);
background(#134890);
    //background(random(0,255));
    // Begin loop for columns
    for (int i = 0; i < cols;i++) {
      // Begin loop for rows
      for (int j = 0; j < rows;j++) {

       
        int x = i * cellSize;
        int y = j * cellSize;
        int loc = (video.width - x - 1) + y*video.width; // Reversing x to mirror the image

       
        color c = video.pixels[loc];
        float sz = (brightness(c) / 255.0) * cellSize;
        //fill(#FFF300);
        fill(#C9FFFC);
        noStroke();
        rect(x + cellSize/2, y + cellSize/2, sz, sz);
      }
    }
	
  defineLights();
	//noFill();
	noStroke();
	
	translate(width / 2, height / 2, 400);
	rotateY(radians(map(sum,0.2,0.4, -180, 180)));
  rotateX(radians(90));
	//rotateY(radians(map(mouseX, 0, width, -90, 90)));
	
	for (int x = 0; x < cubeSize; x+=blockSize) {
		for (int z = 0; z < cubeSize; z+=blockSize) {
			float n = noise((frameCount + x + z * 200) * map(distance,200,0,0,0.01));
			float d = max(dist(cubeSize / 2, cubeSize / 2, x, z) * 0.0075, 0.25);
			float squash = map(n, 0, 1, 3, -1.5);
			float stretch = map(n, 0, 1, -5, 10 / d);
			
			pushMatrix();
			translate(x - cubeSize / 2, 0, z - cubeSize / 2);
			rotate(radians(map(n, 0, 1, -135, 135)));
      //rotate(radians(map(x,0,width,-135,135)));
			scale(squash, stretch, squash);
			box(blockSize * 0.6);
			popMatrix();
		}
	}
}
}
void serialEvent(Serial p){
  String distanceStr = p.readString();
  print(distanceStr);
  distance = float(distanceStr);
  println(distance);
}

void defineLights() {

  pointLight(map(distance,0,200,100,200), map(distance,0,200,50,100), 0,   // Color
             200, -150, 0); // Position


  directionalLight(map(distance,0,200,0,50), map(distance,0,200,100,150), map(distance,0,200,200,255), // Color
                   1, 0, 0);   


  spotLight(255, 255, 109,  // Color
            0, 40, 200,     // Position
            0, -0.5, -0.5,  // Direction
            PI / 2, 2);     // Angle, concentration
}
